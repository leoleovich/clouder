#!/bin/bash

INFO="\033[37;1;42mINFO\033[0m"
WARNING="\033[37;1;43mWARNING:\033[0m"
ERROR="\033[37;1;41mERROR:\033[0m"

echo -e "$INFO Start cooking"
TMP=$1
LOG="/var/log/clouder/`basename $0`.log"
PARTS="/tmp/clouder.parts"
FSTAB="/tmp/clouder.fstab"
os_v=$2
DEB=$3
IMG=$4
HOSTNAME=$5
FORMAT=$6
PASSWORD=$7
SCRIPT=$8

#BACKUPING
(
cp /etc/hostname /etc/hostname.bak || exit 1
cp /etc/hosts /etc/hosts.bak || exit 1
cp /etc/fstab /etc/fstab.bak || exit 1
cp /etc/network/interfaces /etc/network/interfaces.bak || exit 1 
cp /etc/shadow /etc/shadow.bak || exit 1
) &>> $LOG || ( echo -e "$ERROR Fail cooking BKP" ; exit 1 ) || exit 1
#BACKUPING

tmp_mnt=$TMP"_mnt"
mkdir $tmp_mnt &>>$LOG
ls -ld $tmp_mnt &>> $LOG || ( echo -e "$ERROR Fail cooking TMP" ; exit 1 ) || exit 1
dev="/dev/mapper/"`cat $PARTS | head -n1 | awk '{print $3}'`
mount $dev $tmp_mnt &>>$LOG || ( echo -e "$ERROR Fail cooking MOUNT" ; exit 1 ) || exit 1

#copy to /mount iso
cp -rp $TMP/* $tmp_mnt &>> $LOG
cp $FSTAB $tmp_mnt/etc/fstab &>> $LOG

#real device to chroot mounting
mount --bind /dev $tmp_mnt/dev &>>$LOG || ( echo -e "$ERROR Fail cooking MOUNT DEV" ; exit 1 ) || exit 1

mkdir $tmp_mnt/boot/grub/ && cp -r /usr/lib/grub/x86_64-pc/* $tmp_mnt/boot/grub/ &>>$LOG
echo "(hd0)  /dev/sda" > $tmp_mnt/boot/grub/device.map

#NETWORK
echo "$HOSTNAME" > $tmp_mnt/etc/hostname
echo -e "127.0.0.1 $HOSTNAME $HOSTNAME.localdomain\n127.0.0.1 $HOSTNAME" > $tmp_mnt/etc/hosts

if [ $DEB -eq 1 ]; then
	#Sources and install
        cp -r /etc/clouder/$os_v/sources.list $tmp_mnt/etc/apt/sources.list &>> $LOG
        cp -r /etc/clouder/$os_v/$os_v.list $tmp_mnt/etc/apt/sources.list.d/dist.list &>> $LOG
	echo "APT::Cache-Limit "100000000";" > $tmp_mnt/etc/apt/apt.conf.d/00cache
	chroot $tmp_mnt apt-get update &>> $LOG

	chroot $tmp_mnt apt-get install -y grub yandex-archive-keyring &>>$LOG
	chroot $tmp_mnt update-grub -y  &>> $LOG
	chroot $tmp_mnt ln -sf /usr/share/zoneinfo/Europe/Moscow /etc/localtime
	chroot $tmp_mnt chmod 1777 /tmp
	sed -i $tmp_mnt/boot/grub/menu.lst -e "s/root=.*/root=LABEL=root ro quiet splash verbose console=ttyS0/" &>> $LOG
	sed -i $tmp_mnt/boot/grub/menu.lst -e '/^#/d' &>> $LOG
	sed '/./,/^$/!d' -i /boot/grub/menu.lst &>> $LOG

	echo -e "auto lo\n\tiface lo inet loopback\nauto eth0\n\tiface eth0 inet dhcp">$tmp_mnt/etc/network/interfaces
	#Passwd change
	chroot $tmp_mnt sh -c "echo root:$PASSWORD | chpasswd" &>> $LOG
else
	#Sources
        cp -r /etc/clouder/$os_v/* $tmp_mnt/etc/yum.repos.d/ &>> $LOG

	chroot $tmp_mnt yum install -y kernel grub openssh-server man vim &>> $LOG
	#instead update-grub
	echo -e "
	\ttimeout=3
	title Linux (`chroot $tmp_mnt uname -a | awk '{print $3}'`)
	\troot (hd0,0)
	\tkernel /boot/`chroot $tmp_mnt ls -l /boot | grep vmlinuz | head -n1 | awk '{print $NF}'` root=LABEL=root ro quiet splash verbose console=ttyS0
	\tinitrd /boot/`chroot $tmp_mnt ls -l /boot | grep initr | head -n1 | awk '{print $NF}'`">$tmp_mnt/boot/grub/grub.conf
	chroot $tmp_mnt ln -s /boot/grub/grub.conf /boot/grub/menu.lst &>> $LOG
	#instead update-grub

	echo $IP | grep -vq "127.0.0.1" && echo -e "DEVICE=eth0
	BOOTPROTO=dhcp
	ONBOOT=yes">$tmp_mnt/etc/sysconfig/network-scripts/ifcfg-eth0

	echo -e "NETWORKING=yes
	HOSTNAME=$HOSTNAME">$tmp_mnt/etc/sysconfig/network

	chroot $tmp_mnt sh -c "echo $PASSWORD | passwd root --stdin" &>> $LOG
fi

#installing cofigurated GRUB to MBR
echo -e "device (hd0) os.img\nroot (hd0,0)\nsetup (hd0)" | grub --batch --no-floppy --device-map=/dev/null &>> $LOG || ( echo -e "$ERROR Fail cooking GRUB" ; exit 1 ) || exit 1

#exec user script
chroot $tmp_mnt < $SCRIPT &>> $LOG || echo -e "$ERROR Fail cooking USER SCRIPT"

#convert and close image
umount -v $tmp_mnt/dev &>> $LOG || ( echo -e "$ERROR Fail cooking UMOUNT /dev" ; exit 1 ) || exit 1
umount -v $tmp_mnt &>> $LOG || ( echo -e "$ERROR Fail cooking UMOUNT /" ; exit 1 ) || exit 1
kpartx -dv $IMG &>> $LOG || ( echo -e "$ERROR Fail cooking KPARTX" ; exit 1 ) || exit 1

if [ $FORMAT == "tar.gz" ];then # pack whole image
        tar -czf $IMG.tar.gz $IMG &>> $LOG || ( echo -e "$ERROR Fail cooking CONVERT" ; exit 1 ) || exit 1
else
        qemu-img convert -f raw -O $FORMAT $IMG $IMG.$FORMAT &>> $LOG  || ( echo -e "$ERROR Fail cooking CONVERT" ; exit 1 ) || exit
fi
rm -r /tmp/clouder.* $IMG &>> $LOG

echo -e "$INFO Finish cocking"
exit 0
